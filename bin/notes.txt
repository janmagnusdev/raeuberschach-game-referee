Notizen von Henri Baumann:
if(Platflor.isFxApplicationThread()){
update();
}else{
Platform.runLater(() -> update());
}
}

Immer wenn es um Aktualisierungen in der GUI geht, dann über runLater an die GUI deligieren
Alle Methoden der Board Klasse müssen synchnized sein, z.B. executeMove(), auch alle getter & setter!
----

Class.forName(String abc); darüber möglich: .getName(), etc. (siehe Seite 6)
Classloader.loadClass(String abc) <- beste möglichkeit zu Laden.

// wenn der Name bekannt ist:
File path = new File("C:\\Users\\dibo\\test\\")
URL[] urls = new URL[] {path.toURI().toURL() };
ClassLoader cl = new URLClassLoader(urls);
String clsName = "Beispiel";
Class<?> cls = cl.loadClass(clsName);

// wenn der Name noch nicht bekannt ist:
public Field[] getDeclaredFieds() / alle Attribute einer Klasse laden
--> getName(), getType(), getModifiers(), getDeclaredMethods -> gibt Methoden der Klasse raus - siehe MethodenInfosDemo
--> siehe Praktikum, Loaders und dann AttributInfoDemo

Class c = Class.forName("java.awt.Point");
Object o = c.newInstance(); -> erzeugt das gleiche wie new java.awt.Point(); -> geht auch mit Parametern, siehe Seite 10!

Man kann auch Werte aus einer Klasse (auch Private Attribute) ändern, siehe beim Praktikum: AttributZugriffDemo
Man kann auch Methoden aufrufen (-> brauchen wir allerdings nicht!)

In Jar-Dateien gibt es den Meta-INF Ordner, in dem eine Manifest-Datei liegt in der z.B. der Standard-Pfad angegeben ist.



Ein Programm, dass mitmachen will muss von Player ableiten. Es muss die Methode "nextMove" überschreiben. Er hat allerdings keine Informationen von dem Referee...
Auch die Klasse MOVE muss darin integriert sein.
WICHTIG ist, dass der Spieler den Schiedsrichter überhaupt nicht benutzt (auch in keiner Methode!)
--> dazu hat er ein eigenes Spielbrett und die Methode getNextMove(Move move), bei der er einen neuen Move ausgibt und den Move von davor bekommt! (aus den parametern)
Move und Player werden importiert!
-> wenn der gegnerische Move nicht null ist wird er auf dem eigenen Brett ausgeführt und dann wird der eigene Zug ausgeführt und auch direkt ausgeführt
-> dann wird das an den Referee gegeben und der checkt ob alles richtig ist und alle Regeln befolgt wurden... wenn es einen fehler gibt, dann hat de rspieler direkt verloren, ansonsten wird der zug auf dem referee spielbrett auch ausgeführt und an den anderen spieler weitergegeben
In der Manifest-Datei gibt es einen eintrag Player, der den gesamten Klassennamen des Spielers beinhaltet (den Namen der dann auch in der Liste steht!)

Achtung: bei jedem neuen Spiel müssen die entsprechenden Spieler-Klassen neu geladen werden!! (u.U. weil sie static-Methoden haben)

--

Musterlösung:
im GUI ding -> es gibt Spieler A und SPieler B Menu, dort wird zunächst für jeden SPieler der Mensch hinzugefügt, der automatisch aktiviert ist. (Set.Selected(true))
Dort werden auch die Namen ermittelt, die aus den JAR Dateien kommen
Von Dort werden die Spieler gespeichert im GameManager, dort wird gespeichert was Spieler A ist und was Spieler B ist.

Es gibt eine Klasse ProgrammManager, in der akke Programme geladen werden
Es wird geschaut ob in dem Verzeichnis was liegt. dann wird in dem Verzeichnis geschaut, ob es Dateien mit endungen .jar
 gibt. Dann wird geschaut, ob es in dieser jar Datei ein Manifest Attribut Player gibt. (Dibos Methode vom Zettel). Dann wird geschaut ob diese Datei als Spieler A UND als SPieler B geladen werden kann. (mit loadCheck!) WEnn ja, dann wird er in die Liste hinzugefügt.

boolean loadCheck  (String jarfILENAME; string classname, boolean isA)
try(JARCLassLoader c1= new JARCLASSLOADER(jarFilename);)
Class<?> clazz = c1.loadClass(classname);
Constructuor<?> construktor = clazz.getDeclaredConstructor()
constructor.newInstance(isA);
return true;
cahtch (throable th){
th.printStack()
return false;
}
DAmit kann man sich dann die Liste zsmbasteln
Wenn jemand dann auf einen dieser SPieler drückt, dann werden die SPieler als A oder entsprechend als B beim GameManager gesetzt
Wird auf Start gedrückt, dann wird vom GameManager das SPiel gestartet
+ und das Programm wird geladen!
public Player loadProgram(string classname, boolean isA){
Program program = this.Programs.get/classname);
if(programm==null){return null;
}
try(JARClassLoader){


Vorgehensweise:
Als erstes die DummerPlayer Klasse in eine JAR Datei mit Manifest-Datei
Dann die Menus aufbauen
Dann die richtigen Spieler hinterlegen und bei Spielstart darauf Bezug nehmen
In programm sind der Name und der Full JarFileName gespeicehrt

beim start-drücken wird das spiel geöffnet und die variablen (d.h. die spieler (genauer die Namen der Spieler) ) werden über den Namen des Spielers geladen und an das Spiel übergeben! Der öffnet dann den Bums.

------------------------------------------------------------------------------------------------------
Wichtig für die Abgabe etc
- Kommentare wirklich nur bei komplexen Zusammenhängen bspw Javadoc
- Vernünftige aussagekräftige Bezeichner
- Alle Quellen direkt am Source Code verweisen (Kooperationen, Links, etc.)

Referee muss nicht gegen andere Programme oder Zugriffe auf diesen abgesichert sein

------------------------------------------------
Aufgabenblatt 7 Spielbäume
- Bei Schach maximal so Suchtiefe 3
- Bewertungsfunktion, die alle möglichen Ausgänge bewertet, -x für Schwarz, +x für Weiß
- Das schwierigste: gute Bewertungsfunktion
- Man geht beim minimax davon aus, dass der andere Spieler ungefähr gleich bewertet wie ich

Beim Schach bspw Bewertungsgrundlage: Die Differenz der übriggebliebenen Figuren für Weiß und Schwarz

Algorithmen:
Minimax für Spielbaum
AlphaBetaProoning für ausdünnen des Spielbaums <- Optional

Versuchen, testen ist schwierig

Human vs. AI
- Thread wartet auf HumanMove, hmove.join()
- HumanMove extends Thread implements EventHandler
- HumanMove setzt die EventHandler Methoden auf das BoardPanel, und setzt diese auch wieder auf null nach dem Move,
damit der Human keine Moves währenddessen machen darf